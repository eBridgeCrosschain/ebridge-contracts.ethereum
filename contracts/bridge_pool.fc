#include "common/stdlib.fc";
#include "bridge_pool/storage.fc";
#include "common/jetton-utils.fc";
#include "bridge_pool/op.fc";
#include "common/message.fc";
;; #include "bridge_pool/utils.fc";
#include "common/dic.fc";
#include "bridge_pool/errors.fc";
#include "bridge_pool/getter.fc";
#include "bridge_pool/admin-calls.fc";
#include "bridge_pool/bridge_receipt_account-utils.fc";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    var cs = in_msg_cell.begin_parse();
    var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool

    slice sender_address = cs~load_msg_addr();

    load_storage();

    if (flags & 1) {
        return ();
    }
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins();

    force_chain(WORKCHAIN, sender_address, WRONG_WORKCHAIN);
    (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    if (op == transfer_notification) {
        (int jetton_amount, slice from_sender) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        cell ref_cs = in_msg_body~load_ref(); 
        slice ref_ds = ref_cs.begin_parse();
        
        throw_unless(INVALID_AMOUNT, jetton_amount > 0);
        int transfer_op = ref_ds~load_uint(32);

        if (transfer_op == lock) {
            throw_unless(UNAUTHORIZED, equal_slices(from_sender == storage::bridge_address));
            (var target_chain_id, var target_address, var owner) = (ref_ds~load_uint(32),ref_ds~load_uint(256),ref_ds~load_msg_addr());

        }

        if (transfer_op == add_liquidity) {
            
        }
        
        return ();
    }
    if (op == release){
        
    }
    if (op == account_remove_liquidity) {
       
    }
    ;; handle governance message from admin to change pool parameters
    if (equal_slices(sender_address, storage::admin_address)) {
        handle_admin_messages(op, query_id, my_balance, msg_value, in_msg_body);
        return ();
    }

    ;; make sure that the message has been processed
    if (handle_getter_messages(op, query_id, sender_address, in_msg_body)) {
        return (); 
    }

    throw(WRONG_OP);
}


